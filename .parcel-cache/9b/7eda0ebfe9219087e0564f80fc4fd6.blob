"use strict";
var _babelRuntimeHelpersClassPrivateFieldGet = require("@babel/runtime/helpers/classPrivateFieldGet");
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _babelRuntimeHelpersClassPrivateFieldGetDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersClassPrivateFieldGet);
var _babelRuntimeHelpersClassPrivateFieldSet = require("@babel/runtime/helpers/classPrivateFieldSet");
var _babelRuntimeHelpersClassPrivateFieldSetDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersClassPrivateFieldSet);
var _babelRuntimeHelpersAssertThisInitialized = require("@babel/runtime/helpers/assertThisInitialized");
var _babelRuntimeHelpersAssertThisInitializedDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersAssertThisInitialized);
var _babelRuntimeHelpersInherits = require("@babel/runtime/helpers/inherits");
var _babelRuntimeHelpersInheritsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersInherits);
var _babelRuntimeHelpersPossibleConstructorReturn = require("@babel/runtime/helpers/possibleConstructorReturn");
var _babelRuntimeHelpersPossibleConstructorReturnDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersPossibleConstructorReturn);
var _babelRuntimeHelpersGetPrototypeOf = require("@babel/runtime/helpers/getPrototypeOf");
var _babelRuntimeHelpersGetPrototypeOfDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersGetPrototypeOf);
var _babelRuntimeHelpersClassCallCheck = require("@babel/runtime/helpers/classCallCheck");
var _babelRuntimeHelpersClassCallCheckDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersClassCallCheck);
var _babelRuntimeHelpersCreateClass = require("@babel/runtime/helpers/createClass");
var _babelRuntimeHelpersCreateClassDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersCreateClass);
var _babelRuntimeHelpersDefineProperty = require("@babel/runtime/helpers/defineProperty");
var _babelRuntimeHelpersDefinePropertyDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersDefineProperty);
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _babelRuntimeHelpersGetPrototypeOfDefault.default(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _babelRuntimeHelpersGetPrototypeOfDefault.default(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _babelRuntimeHelpersPossibleConstructorReturnDefault.default(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
// Select all Relevant HTML Elements
var form = document.querySelector('.form');
var containerWorkouts = document.querySelector('.workouts');
var inputType = document.querySelector('.form__input--type');
var inputDistance = document.querySelector('.form__input--distance');
var inputDuration = document.querySelector('.form__input--duration');
var inputCadence = document.querySelector('.form__input--cadence');
var inputElevation = document.querySelector('.form__input--elevation');
var deleteAll = document.querySelector('.workouts__deleteAll');
var sortBy = document.querySelector('.sort-by');
var instructions = document.querySelector('.instructions');
var Workout = /*#__PURE__*/(function () {
  function Workout(date, coords, distance, duration) {
    _babelRuntimeHelpersClassCallCheckDefault.default(this, Workout);
    _babelRuntimeHelpersDefinePropertyDefault.default(this, "id", (Date.now() + '').slice(-7));
    this.date = new Date(date);
    // date
    this.coords = coords;
    // [lat, lng]
    this.distance = distance;
    // km
    this.duration = duration;
  }
  _babelRuntimeHelpersCreateClassDefault.default(Workout, [{
    key: "description",
    value: function description() {
      // prettier-ignore
      var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      return ("").concat(this.type[0].toUpperCase()).concat(this.type.slice(1), " on \n    ").concat(months[this.date.getMonth()], " ").concat(this.date.getDate(), ", ").concat(this.date.getFullYear());
    }
  }]);
  return Workout;
})();
var Running = /*#__PURE__*/(function (_Workout) {
  _babelRuntimeHelpersInheritsDefault.default(Running, _Workout);
  var _super = _createSuper(Running);
  function Running(date, coords, distance, duration, cadence) {
    var _this;
    _babelRuntimeHelpersClassCallCheckDefault.default(this, Running);
    _this = _super.call(this, date, coords, distance, duration);
    _babelRuntimeHelpersDefinePropertyDefault.default(_babelRuntimeHelpersAssertThisInitializedDefault.default(_this), "type", 'running');
    _this.cadence = cadence;
    _this.calcPace();
    _this.description = _this.description();
    return _this;
  }
  _babelRuntimeHelpersCreateClassDefault.default(Running, [{
    key: "calcPace",
    value: function calcPace() {
      this.pace = this.duration / this.distance;
      // min/km
      return this.pace;
    }
  }]);
  return Running;
})(Workout);
var Cycling = /*#__PURE__*/(function (_Workout2) {
  _babelRuntimeHelpersInheritsDefault.default(Cycling, _Workout2);
  var _super2 = _createSuper(Cycling);
  function Cycling(date, coords, distance, duration, elevationGain) {
    var _this2;
    _babelRuntimeHelpersClassCallCheckDefault.default(this, Cycling);
    _this2 = _super2.call(this, date, coords, distance, duration);
    _babelRuntimeHelpersDefinePropertyDefault.default(_babelRuntimeHelpersAssertThisInitializedDefault.default(_this2), "type", 'cycling');
    _this2.elevationGain = elevationGain;
    _this2.description = _this2.description();
    _this2.calcSpeed();
    return _this2;
  }
  _babelRuntimeHelpersCreateClassDefault.default(Cycling, [{
    key: "calcSpeed",
    value: function calcSpeed() {
      this.speed = this.distance / (this.duration / 60);
      // km/h
      return this.speed;
    }
  }]);
  return Cycling;
})(Workout);
var _map = new WeakMap();
var _marker = new WeakMap();
var _workouts = new WeakMap();
var _zoomLevel = new WeakMap();
var _workoutDate = new WeakMap();
var App = /*#__PURE__*/(function () {
  function App() {
    _babelRuntimeHelpersClassCallCheckDefault.default(this, App);
    _map.set(this, {
      writable: true,
      value: void 0
    });
    _marker.set(this, {
      writable: true,
      value: void 0
    });
    _workouts.set(this, {
      writable: true,
      value: []
    });
    _zoomLevel.set(this, {
      writable: true,
      value: 13
    });
    _workoutDate.set(this, {
      writable: true,
      value: ''
    });
    _babelRuntimeHelpersDefinePropertyDefault.default(this, "_checkExistingWorkoutDate", function () {
      var date = new Date();
      if (_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workoutDate)) {
        date = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workoutDate);
        _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _workoutDate, '');
      }
      return new Date(date);
    });
    // object initialization through class App methods
    this._getPosition();
    this._getLocalStorage();
    this._checkExistingWorkouts();
    // All event listners
    form.addEventListener('submit', this._newWorkout.bind(this));
    inputType.addEventListener('change', this._toggleElevationField);
    containerWorkouts.addEventListener('click', (function (e) {
      this._moveToPopUp(e);
      this._deleteWorkout(e);
      this._editWorkout(e);
    }).bind(this));
    deleteAll.addEventListener('click', this._deleteAllWorkouts.bind(this));
    sortBy.addEventListener('change', this._sortBy.bind(this));
  }
  _babelRuntimeHelpersCreateClassDefault.default(App, [{
    key: "_getPosition",
    value: function _getPosition() {
      navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function () {
        alert("Location Not Enabled OR Found. Please refresh the page and ALLOW location to start using the app. Thank You");
      });
    }
  }, {
    key: "_loadMap",
    value: function _loadMap(pos) {
      // callback function
      var latitude = pos.coords.latitude;
      var longitude = pos.coords.longitude;
      var coords = [latitude, longitude];
      // adding Leaflet
      // map and marker object intialization
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _map, L.map('map').setView(coords, _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _zoomLevel)));
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _marker, L.marker(coords));
      // adding tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map));
      // display map markers from the storage
      this._displayLocalStorageMapMarkers();
      // setting the map view and zoom level based on current location
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map).setView(coords, _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _zoomLevel), {
        animate: false
      });
      // listen to any click event on the map and display the workout form
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map).on('click', this._showForm.bind(this));
    }
  }, {
    key: "_showForm",
    value: function _showForm(e) {
      // callback function
      // getting lat lng of where user clicked
      var _e$latlng = e.latlng, latitude = _e$latlng.lat, longitude = _e$latlng.lng;
      // if current marker is not attached to a workout, remove it -- else update current marker
      if (!_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _marker).isPopupOpen()) _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _marker).remove();
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _marker, L.marker([latitude, longitude]).addTo(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map)));
      // hide the getting started instructions
      instructions.classList.add('hide__instructions');
      // show the form
      form.classList.remove('hidden');
      inputType.focus();
    }
  }, {
    key: "_toggleElevationField",
    value: function _toggleElevationField() {
      // callback function
      // to toggle between cadence and elevation fields
      inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
      inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    }
  }, {
    key: "_newWorkout",
    value: function _newWorkout(e) {
      e.preventDefault();
      var workout;
      var _classPrivateFieldGet2 = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _marker).getLatLng(), latitude = _classPrivateFieldGet2.lat, longitude = _classPrivateFieldGet2.lng;
      var coords = [latitude, longitude];
      var date = this._checkExistingWorkoutDate();
      var inputValidations = function inputValidations() {
        for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {
          inputs[_key] = arguments[_key];
        }
        // using rest parameters
        var validIntegers = inputs.every(function (input) {
          return Number.isFinite(input);
        });
        var positiveIntegers = inputs.every(function (input) {
          return input > 0;
        });
        return validIntegers && positiveIntegers;
      };
      // Get data from the form
      var type = inputType.value;
      var distance = Number(inputDistance.value);
      var duration = Number(inputDuration.value);
      // if workout is running, create a running object
      if (type === 'running') {
        var cadence = Number(inputCadence.value);
        // Check if the input is valid
        if (!inputValidations(distance, duration, cadence)) return alert("Please enter a value. \n  Values MUST be a positive number.");
        // guard clause
        // create a running object
        workout = new Running(date, coords, distance, duration, cadence);
      }
      // if workout is cycling, create a cycling object
      if (type === 'cycling') {
        var elevation = Number(inputElevation.value);
        // Check if the input is valid
        if (!inputValidations(distance, duration) && isNaN(elevation)) return alert("Please enter a value. \n  Values MUST be a positive number.");
        // guard clause
        // create a cycling object
        workout = new Cycling(date, coords, distance, duration, elevation);
      }
      // add the new object to workout array
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).push(workout);
      // Render workout on a map as a marker
      this._renderWorkoutOnMap(workout);
      // Render workout on the list
      this._renderWorkoutOnList(workout);
      // Check if there is need to display DeleteAll or Sort buttons
      this._checkExistingWorkouts();
      // Hide form and clear input fields
      this._resetFields();
      // save wokouts to local storage
      this._setLocalStorage();
    }
  }, {
    key: "_renderWorkoutOnMap",
    value: function _renderWorkoutOnMap(workout) {
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _marker).bindPopup(L.popup({
        maxWidth: 250,
        minWidth: 100,
        autoClose: false,
        closeOnClick: false,
        closeButton: false,
        className: ("").concat(workout.type, "-popup")
      }).setContent(("").concat(workout.type === 'running' ? '🏃‍♂️' : '🚴‍', " ").concat(workout.description))).openPopup();
    }
  }, {
    key: "_renderWorkoutOnList",
    value: function _renderWorkoutOnList(workout) {
      var html = ("\n    <li class=\"workout workout--").concat(workout.type, "\" data-id=\"").concat(workout.id, "\">\n      <h2 class=\"workout__title\">").concat(workout.description, "</h2>\n      <span class=\"workout__edit\"><i class=\"fas fa-edit\"></i></span>\n      <span class=\"workout__delete\"><i class=\"far fa-trash-alt\"></i></span>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">").concat(workout.type === 'running' ? '🏃‍♂️' : '🚴‍', "</span>\n        <span class=\"workout__value\">").concat(workout.distance, "</span>\n        <span class=\"workout__unit\">km</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⏱</span>\n        <span class=\"workout__value\">").concat(workout.duration, "</span>\n        <span class=\"workout__unit\">min</span>\n      </div>");
      if (workout.type === 'running') {
        var _workout$pace;
        html = html + ("\n        <div class=\"workout__details\">\n        <span class=\"workout__icon\">⚡️</span>\n        <span class=\"workout__value\">").concat((_workout$pace = workout.pace) === null || _workout$pace === void 0 ? void 0 : _workout$pace.toFixed(1), "</span>\n        <span class=\"workout__unit\">min/km</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">🦶🏼</span>\n        <span class=\"workout__value\">").concat(workout.cadence, "</span>\n        <span class=\"workout__unit\">spm</span>\n      </div>\n    </li>");
      }
      if (workout.type === 'cycling') {
        var _workout$speed;
        html = html + ("\n        <div class=\"workout__details\">\n        <span class=\"workout__icon\">⚡️</span>\n        <span class=\"workout__value\">").concat((_workout$speed = workout.speed) === null || _workout$speed === void 0 ? void 0 : _workout$speed.toFixed(1), "</span>\n        <span class=\"workout__unit\">km/h</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⛰</span>\n        <span class=\"workout__value\">").concat(workout.elevationGain, "</span>\n        <span class=\"workout__unit\">m</span>\n      </div>\n    </li>");
      }
      form.insertAdjacentHTML('afterend', html);
    }
  }, {
    key: "_moveToPopUp",
    value: function _moveToPopUp(e) {
      if (!e.target.closest('.workout')) return;
      var workoutId = e.target.closest('.workout').dataset.id;
      var workout = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).find(function (workout) {
        return workout.id === workoutId;
      });
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map).setView(workout.coords, _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _zoomLevel), {
        animate: true,
        duration: 1
      });
    }
  }, {
    key: "_resetFields",
    value: function _resetFields() {
      inputCadence.value = inputDistance.value = inputDuration.value = inputElevation.value = '';
      inputDistance.blur();
      inputCadence.blur();
      inputDuration.blur();
      inputElevation.blur();
      form.style.display = 'none';
      form.classList.add('hidden');
      setTimeout(function () {
        return form.style.display = 'grid';
      }, 1000);
    }
  }, {
    key: "_setLocalStorage",
    value: function _setLocalStorage() {
      // stringify arrays and objects
      localStorage.setItem('workouts', JSON.stringify(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts)));
    }
  }, {
    key: "_displayLocalStorageMapMarkers",
    value: function _displayLocalStorageMapMarkers() {
      var _this3 = this;
      // display and set workouts markers on the map, if any when the map loads for the first time
      if (!_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).length > 1) return console.log("No workouts found in local storage");
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).forEach(function (workout) {
        _babelRuntimeHelpersClassPrivateFieldSetDefault.default(_this3, _marker, L.marker(workout.coords).addTo(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(_this3, _map)));
        _this3._renderWorkoutOnMap(workout);
      });
    }
  }, {
    key: "_populateForm",
    value: function _populateForm(workout) {
      inputType.value = workout.type;
      inputDistance.value = workout.distance;
      inputDuration.value = workout.duration;
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _marker, L.marker(workout.coords).addTo(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map)));
      if (workout.type === 'running') {
        inputCadence.value = workout.cadence;
        inputCadence.closest('.form__row').classList.remove('form__row--hidden');
        inputElevation.closest('.form__row').classList.add('form__row--hidden');
      }
      if (workout.type === 'cycling') {
        inputElevation.value = workout.elevationGain;
        inputElevation.closest('.form__row').classList.remove('form__row--hidden');
        inputCadence.closest('.form__row').classList.add('form__row--hidden');
      }
      inputDistance.focus();
    }
  }, {
    key: "_editWorkout",
    value: function _editWorkout(e) {
      if (!e.target.closest('.workout__edit')) return;
      var workout = e.target.closest('.workout');
      var workoutId = workout.dataset.id;
      var workoutToEdit = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).find(function (workout) {
        return workout.id === workoutId;
      });
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _workoutDate, workoutToEdit.date);
      workout.style.display = 'none';
      form.classList.remove('hidden');
      // hide the getting started instructions
      instructions.classList.add('hide__instructions');
      setTimeout(function () {
        return form.style.display = 'grid';
      }, 1000);
      this._populateForm(workoutToEdit);
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).splice(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).indexOf(workoutToEdit), 1);
    }
  }, {
    key: "_getLocalStorage",
    value: function _getLocalStorage() {
      var _this4 = this;
      // parse data using JSON
      var data = JSON.parse(localStorage.getItem('workouts'));
      // display workouts on the list
      if (!data) return;
      _babelRuntimeHelpersClassPrivateFieldSetDefault.default(this, _workouts, data);
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).forEach(function (workout) {
        return _this4._renderWorkoutOnList(workout);
      });
    }
  }, {
    key: "_deleteWorkout",
    value: function _deleteWorkout(e) {
      if (!e.target.closest('.workout__delete')) return;
      var workout = e.target.closest('.workout');
      workout.style.display = 'none';
      var workoutId = workout.dataset.id;
      var workoutToDelete = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).find(function (workout) {
        return workout.id === workoutId;
      });
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).splice(_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).indexOf(workoutToDelete), 1);
      _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _map).eachLayer(function (layer) {
        if (layer.options.attribution) return;
        layer.remove();
      });
      this._displayLocalStorageMapMarkers();
      this._setLocalStorage();
      this._checkExistingWorkouts();
    }
  }, {
    key: "_deleteAllWorkouts",
    value: function _deleteAllWorkouts(e) {
      this.reset();
    }
  }, {
    key: "_checkExistingWorkouts",
    value: function _checkExistingWorkouts() {
      if (_babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).length < 1) {
        deleteAll.style.display = 'none';
        sortBy.style.display = 'none';
      } else {
        deleteAll.style.display = 'flex';
        sortBy.style.display = 'flex';
      }
    }
  }, {
    key: "_sortByData",
    value: function _sortByData(data) {
      var _this5 = this;
      var newOrder = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).sort(function (wa, wb) {
        return wa[data] - wb[data];
      });
      var currentWorkouts = document.querySelectorAll('.workout');
      currentWorkouts.forEach(function (el) {
        return el.style.display = 'none';
      });
      newOrder.forEach(function (el) {
        return _this5._renderWorkoutOnList(el);
      });
    }
  }, {
    key: "_sortByDate",
    value: function _sortByDate() {
      var _this6 = this;
      var newOrder = _babelRuntimeHelpersClassPrivateFieldGetDefault.default(this, _workouts).sort(function (wa, wb) {
        return new Date(wb.date) - new Date(wa.date);
      });
      var currentWorkouts = document.querySelectorAll('.workout');
      currentWorkouts.forEach(function (el) {
        return el.style.display = 'none';
      });
      newOrder.forEach(function (el) {
        return _this6._renderWorkoutOnList(el);
      });
    }
  }, {
    key: "_sortBy",
    value: function _sortBy() {
      if (sortBy.value === 'distance') this._sortByData('distance');
      if (sortBy.value === 'duration') this._sortByData('duration');
      if (sortBy.value === 'date') this._sortByDate();
    }
  }, {
    key: "reset",
    value: function reset() {
      // the only public method
      // direct access in console through app object
      localStorage.removeItem('workouts');
      location.reload();
    }
  }]);
  return App;
})();
var app = new App();
